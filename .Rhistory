filtro_gender
filter(starwars, gender == "NA")
filter(starwars, gender == NA)
filter(starwars, any(is.na(gender)))
valores_na <- filter(starwars, any(is.na(gender)))
valores_na
View(valores_na)
any(is.na(gender))
valores_na <- filter(starwars, is.na(gender))
valores_na
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
starwars %>%
group_by(species) %>%
summarise(cantidad = n(),
promedio = mean(height, na.rm = TRUE),
sd = sd(height, na.rm = TRUE),
maximo = max(height, na.rm = TRUE)) %>%
filter(cantidad > 1) %>%
arrange(desc(promedio))
library(datasets)
data("iris")
iris %>%
group_by(Species) %>%
filter(Sepal.Length > 7)
View(iris)
iris %>%
group_by(Species) %>%
filter(Sepal.Length > 7 & Petal.Length > 6)
iris %>%
filter(Species %in% c("versicolor", "setosa"))
filter(!(Species %in% c("versicolor", "setosa")))
filter(iris, !(Species %in% c("versicolor", "setosa")))
solo_sepal <- select(iris, contains("Sepal"))
View(solo_sepal)
head(solo_sepal)
head(petal)
petal <- select(iris, starts_with("Petal"))
head(petal)
select(iris, Petal.Widht)
select(iris, Petal.width)
select(iris, Sepal.Width)
select(iris, Sepal.Width)[head(15)]
select(iris, Sepal.Width, head(15))
v1 <- (select(iris, Sepal.Width), head(15))
select((iris, Sepal.Width), head(15))
select(iris, Sepal.Width) %>%
head(15)
select(iris, Sepal.Width, Petal.Width) %>%
head(15)
menos_lenght <- select(iris, -c(Petal.Length, Petal.Width))
menos_lenght
menos_lenght <- select(iris, -c(Petal.Length, Petal.Width)) %>%
head(15)
menos_lenght
library(stringr)
#Limpiar espacios en blanco
str_trim("   hola, esto es un texto ") #limpia al ppio o al final del txto
#Agrega texto o número al ppio o final del texto
str_pad("739", width = 5, side = "left", pad = "0")
#Agrega texto o número al ppio o final del texto
str_pad("739", width = 6, side = "left", pad = "0")
str_pad("DNI_number", width = 12, side = "left", pad = "##")
str_pad("DNI_number", width = 12, side = "left", pad = "#")
str_detect(nombres, "An")
nombres <- c("Anahí", "Paula", "Emilia", "Alejandra", "Wendy")
str_detect(nombres, "An")
str_detect(nombres, "a")
str_detect(nombres, "An")
str_detect(nombres, "na")
nombres <- c("Anahí", "Paula", "Emiliana", "Alejandra", "Wendy")
str_detect(nombres, "na")
#Reemplazar un texto por otro
str_replace(nombres, "Paula", "Mi Perra")
#Cambio a minúsculas o mayúculas
str_to_lower(nombres)
str_to_upper(nombres)
str_to_lower(nombres, "Wendy")
str_to_upper(nombres, "paula")
library(readr)
read_csv(estimados.csv)
read_csv("estimates.csv")
# Incluimos el paquete
library(ggplot2)
# Estudiemos el set de datos
str(diamonds)
head(diamonds)
# Modificación de escala sobre variable continua
gg.cont <- ggplot(diamonds, aes(x = x * y * z, y = price)) +
geom_point()
gg.cont
gg.cont +
scale_x_continuous(name = "size",
limits = c(0, 800),
breaks = seq(0, 800, 200),
minor_breaks = seq(0, 800, 100))
gg.disc <- ggplot(diamonds, aes(x = clarity, y = price)) +
geom_jitter()
gg.disc
gg.disc
# Volvamos a un ejemplo básico
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
col = Species)) +
geom_point()
# Añadimos un suavizado mediante el uso del stat_smooth
ggplot(data = iris, aes(x = Sepal.Length,
y = Sepal.Width, col = Species)) +
geom_point() +
stat_smooth()
ggplot(data = iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
stat_smooth(aes(fill = Species), alpha = 0.5)
library()
rm(list=ls())
getwd()
install.packages("RPostgreSQL")
library(ggplot2)
data('diamonds')
str(diamonds)
summary(diamonds)
ggplot(data = diamonds, aes(x = carat, y = price, col = color)) +
geom_point()
library(crayon)
library(dplyr)
ggplot(data = diamonds, aes(x = carat, y = price, col = color)) +
geom_point()
View(diamonds)
View(diamonds)
ggplot(data = diamonds, aes(x = carat, y = price, col = color)) +
geom_bar()
ggplot(data = diamonds, aes(x = carat, y = price, col = cut)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, shape = cut)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, col = color)) +
geom_point(alpha = 1/10)
ggplot(data = diamonds, aes(x = carat, y = price, col = color)) +
geom_point(alpha = 1/5)
# Resumen del contenido del set de datos
str(iris)
iris
# Gráfico en R Base: Scatter plot de Longitud vs. Anchura en sépalos
plot(iris$Sepal.Length, iris$Sepal.Width)
summarise(iris)
# Resumen del contenido del set de datos
str(iris)
summary(iris)
# ggplot2: Scatter plot de Longitud vs. Anchura en sépalos. Color de los puntos: verdes.
ggplot(data = iris,  aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(color = "green")
# ggplot2: Scatter plot de Longitud vs. Anchura en sépalos. Color de los puntos: según la especie.
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
# Estudiemos el set de datos
str(diamonds)
summary(diamonds)
# Variables continuas: tanto carat como el price son variables continuas que van desde un rango de datos hasta otro rango de datos pero eleje es continuo, no hay ningún salto
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
# Scatter plot de una variable continua vs discreta, por ej que x sea el precio y que la y sea una variable discreta como el cut
ggplot(data = diamonds, aes(x = cut, y = price)) +
geom_point()
# Scatter plot de una variable continua vs discreta, por ej que x sea el precio y que la y sea una variable discreta como el cut
ggplot(data = diamonds, aes(x = price, y = cut)) +
geom_point()
# Variables discretas: Scatter plot de dos variables discretas
ggplot(data = diamonds, aes(x = cut, y = price)) +
geom_jitter()
# Color como aesthetic (continuo)
ggplot(diamonds, aes(x = price, y = x * y * z, col = carat)) +
geom_point()
# Relleno como aesthetic
ggplot(data = diamonds, aes(x= carat, y = price, fill = color)) +
geom_point()
# Relleno como aesthetic
ggplot(data = diamonds, aes(x= carat, y = price, fill = cut)) +
geom_point()
# Tipo de linea como aesthetic (discreta)
ggplot(diamonds, aes(x = carat, y = price, linetype=cut, col=cut)) +
geom_smooth(se=T, size=1)
summary(iris)
# Un ejemplo de overplotting
mtcars
summary(mtcars)
str(mtcars)
gg <- ggplot(data=mtcars, aes(x = as.factor(cyl), y = as.factor(am), col = as.factor(gear)))
gg +
geom_point(size = 3)
# Con geom_jitter lo solucionamos
gg +
geom_jitter(size = 3)
# Dos variables continuas
# -----------------------
summary(diamonds)
gg <- ggplot(data = diamonds, aes(x = price, y = depth))
# Scatter plot
gg +
geom_point()
View(diamonds)
# Scatter con ruido
gg +
geom_jitter()
gg <- ggplot(data = diamonds, aes(y = price, x = cut))
gg +
geom_bar()
# Mostremos en un grafico quilates contra precio con identificación de claridad
gg <- ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +
geom_point()
gg
# De una forma mucho más clara ("desagregando" por clarity) -> (facet_wrap(~clarity))
gg +
facet_wrap(~clarity)
# Mejoremos la visualización colocando las métricas de forma adyacente
ggplot(data = diamonds, aes(x = price)) +
geom_bar(position = 'fill') +
facet_wrap(~cut)
gg.disc <- ggplot(diamonds, aes(x = clarity, y = price)) +
geom_jitter()
library(ggplot2)
dfclus
set.seed(1234)
df <- data.frame(
sex=factor(rep(c("M", "H"), each=200)),
weight=round(c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5)))
)
head(df)
df
str(df)
summary(df)
head(df)
#histograma normal
p<-ggplot(df, aes(x=weight)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
p
#histograma normal
p<-ggplot(df, aes(x=weight)) +
geom_histogram(colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
p
p7<-p+ geom_vline(aes(xintercept=mean(weight)),
color="blue", linetype="dashed", size=1)
p7
#histograma normal
p<-ggplot(df, aes(x=weight)) +
geom_histogram(aes(y=..density..),colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
p7<-p+ geom_vline(aes(xintercept=mean(weight)),
color="blue", linetype="dashed", size=1)
p7
p1<-ggplot(df, aes(x=weight,fill=sex, color=sex)) +
geom_histogram(alpha=0.6, position="identity")+
geom_density(alpha=.2)
p1
p1<-ggplot(df, aes(x=weight,fill=sex, color=sex)) +
geom_histogram(alpha=0.6)+
geom_density(alpha=.2)
p1
p1<-ggplot(df, aes(x=weight,fill=sex, color=sex)) +
geom_histogram(alpha=0.6, position="identity")+
geom_density(alpha=.2)
p1
p2<-ggplot(df, aes(x=weight,fill=sex, color=sex)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5)+
geom_density(alpha=.2)
p2
library(plyr)
mu <- ddply(df, "sex", summarise, grp.mean=mean(weight))
head(mu)
mu
p3<-p2+geom_vline(data=mu, aes(xintercept=grp.mean, color=sex),
linetype="dashed")+
theme_minimal()
p3
p4<-p<-ggplot(df, aes(x=weight,fill=sex, color=sex)) +
geom_histogram(position="dodge",binwidth = 1)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=sex),
linetype="dashed")
p4
p4<-p<-ggplot(df, aes(x=weight,fill=sex, color=sex)) +
geom_histogram(position="dodge",binwidth = 1)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=sex),
linetype="dashed") +
geom_density(alpha=.2)
p4
p4<-p<-ggplot(df, aes(x=weight,fill=sex, color=sex)) +
geom_histogram(aes(y=density), position="dodge",binwidth = 1)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=sex),
linetype="dashed") +
geom_density(alpha=.2)
p4
p4<-p<-ggplot(df, aes(x=weight,fill=sex, color=sex)) +
geom_histogram(aes(y=..density..), position="dodge",binwidth = 1)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=sex),
linetype="dashed") +
geom_density(alpha=.2)
p4
#Cargar y utilizar función IPAK
#ver vídeo https://www.youtube.com/watch?v=UjQz9SxG9rk
library(ggplot2)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
pack <- c("apa", "haven", "ggplot2")
ipak(pack)
packages <- c("tidyverse","cluster", "factoextra","NbClust","tidyr")
ipak(packages)
df <- USArrests
df
str(df)
summary(df)
#normalizar las puntuaciones.
#Las cifras son diferentes por eso tenemos que normalizarlas porque sino podemos estar trabajando con valores que son muy grandes y otros puede que sean muy pequeños
df <- scale(df)
head(df)
#calcular la matriz de distacias
m.distancia <- get_dist(df, method = "euclidean") #el método aceptado también puede ser: "maximum", "manhattan", "canberra", "binary", "minkowski", "pearson", "spearman" o "kendall"
fviz_dist(m.distancia, gradient = list(low = "blue", mid = "white", high = "red"))
#estimar el número de clústers
#Elbow, silhouette o gap_stat  method
fviz_nbclust(df, kmeans, method = "wss")
fviz_nbclust(df, kmeans, method = "silhouette")
fviz_nbclust(df, kmeans, method = "gap_stat")
#con esta función se pueden calcular:
#the index to be calculated. This should be one of : "kl", "ch", "hartigan", "ccc", "scott",
#"marriot", "trcovw", "tracew", "friedman", "rubin", "cindex", "db", "silhouette", "duda",
#"pseudot2", "beale", "ratkowsky", "ball", "ptbiserial", "gap", "frey", "mcclain", "gamma",
#"gplus", "tau", "dunn", "hubert", "sdindex", "dindex", "sdbw", "all" (all indices except GAP,
#Gamma, Gplus and Tau), "alllong" (all indices with Gap, Gamma, Gplus and Tau included).
resnumclust<-NbClust(df, distance = "euclidean", min.nc=2, max.nc=10, method = "kmeans", index = "alllong")
fviz_nbclust(resnumclust)
fviz_nbclust(resnumclust)
fviz_nbclust(resnumclust)
resnumclust
#Cargar y utilizar función IPAK
#ver vídeo https://www.youtube.com/watch?v=UjQz9SxG9rk
library(ggplot2)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("tidyverse","cluster", "factoextra","NbClust","tidyr")
ipak(packages)
df <- USArrests
df
str(df)
summary(df)
#normalizar las puntuaciones.
#Las cifras son diferentes por eso tenemos que normalizarlas porque sino podemos estar trabajando con valores que son muy grandes y otros puede que sean muy pequeños, al normalizar nos tiran todos los valores a partir de un centro y de que es 0
df <- scale(df)
head(df)
summary(df)
#calcular la matriz de distacias
m.distancia <- get_dist(df, method = "euclidean") #el método aceptado también puede ser: "maximum", "manhattan", "canberra", "binary", "minkowski", "pearson", "spearman" o "kendall"
fviz_dist(m.distancia, gradient = list(low = "blue", mid = "white", high = "red"))
#estimar el número de clústers
#Elbow, silhouette o gap_stat  method
fviz_nbclust(df, kmeans, method = "wss")
fviz_nbclust(df, kmeans, method = "silhouette")
fviz_nbclust(df, kmeans, method = "gap_stat")
#con esta función se pueden calcular:
#the index to be calculated. This should be one of : "kl", "ch", "hartigan", "ccc", "scott",
#"marriot", "trcovw", "tracew", "friedman", "rubin", "cindex", "db", "silhouette", "duda",
#"pseudot2", "beale", "ratkowsky", "ball", "ptbiserial", "gap", "frey", "mcclain", "gamma",
#"gplus", "tau", "dunn", "hubert", "sdindex", "dindex", "sdbw", "all" (all indices except GAP,
#Gamma, Gplus and Tau), "alllong" (all indices with Gap, Gamma, Gplus and Tau included).
resnumclust<-NbClust(df, distance = "euclidean", min.nc=2, max.nc=10, method = "kmeans", index = "alllong")
fviz_nbclust(resnumclust)
#calculamos los dos clústers
k2 <- kmeans(df, centers = 2, nstart = 25)
k2
k2
str(k2)
#plotear los cluster
fviz_cluster(k2, data = df)
fviz_cluster(k2, data = df, ellipse.type = "euclid",repel = TRUE,star.plot = TRUE) #ellipse.type= "t", "norm", "euclid"
fviz_cluster(k2, data = df, ellipse.type = "norm")
res2 <- hcut(df, k = 2, stand = TRUE)
fviz_dend(res2, rect = TRUE, cex = 0.5,
k_colors = c("red","#2E9FDF"))
res2 <- hcut(df, k = 2, stand = FALSE)
fviz_dend(res2, rect = TRUE, cex = 0.5,
k_colors = c("red","#2E9FDF"))
res4 <- hcut(df, k = 4, stand = TRUE)
fviz_dend(res4, rect = TRUE, cex = 0.5,
k_colors = c("red","#2E9FDF","green","black"))
#pasar los cluster a mi df inicial para trabajar con ellos
USArrests %>%
mutate(Cluster = k2$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
k
k2
#pasar los cluster a mi df inicial para trabajar con ellos
USArrests %>%
mutate(Cluster = k2$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
df <- USArrests
df
df$clus<-as.factor(k2$cluster)
df
df <- USArrests
df <- scale(df)
df
View(df)
df<- as.data.frame(df)
df
df$clus<-as.factor(k2$cluster)
df
df$clus<-factor(df$clus)
df
data_long <- gather(df, caracteristica, valor, Murder:Rape, factor_key=TRUE)
data_long
ggplot(data_long, aes(as.factor(x = caracteristica), y = valor, group=clus, colour = clus)) +
stat_summary(fun = mean, geom="pointrange", size = 1)+
stat_summary(geom="line")
ggplot(data_long, aes(as.factor(x = caracteristica), y = valor, group=clus, colour = clus)) +
stat_summary(fun = mean, geom="pointrange", size = 1)+
stat_summary(geom="line") +
geom_point(aes(shape=clus))
ggplot(data_long, aes(as.factor(x = caracteristica), y = valor, group=clus, colour = clus)) +
stat_summary(fun = mean, geom="pointrange", size = 1)+
stat_summary(geom="line") +
geom_point(aes(shape=clus))
usethis::use_course('lcolladotor/RBiocIntro2020')
install.packages(usethis)
install.packages("usethis")
library(usethis)
usethis::use_course('lcolladotor/RBiocIntro2020')
usethis::use_course('lcolladotor/RBiocIntro2020')
usethis::use_course('lcolladotor/RBiocIntro2020')
# script to convert ensembl gene Id to gene symbols
# setwd("~/Desktop/demo/convert_geneID_to_gene_symbols")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
a
library(biomaRt)
BiocManager::install("biomaRt", force = TRUE)
listEnsembl(archive = TRUE)
library(biomaRt)
library(annotables)
library(org.Hs.eg.db)
library(EnsDb.Hsapiens.v86)
library(EnsDb.Hsapiens.v86)
library(tidyverse)
# Listar las versiones de Ensembl disponibles
ensembl_versions <- listEnsembl()
listEnsembl(archive = TRUE)
library(annotables)
library(tidyverse)
library(EnsDb.Hsapiens.v86)
# input list of Ensembl ID's
ensembl.ids <- read.delim('gene_ensembl_ids.txt', header = F)
# input list of Ensembl ID's
ensembl.ids <- read.delim('gene_ensembl_ids.txt', header = F)
# input list of Ensembl ID's
ensembl.ids <- read.delim('gene_ensembl_ids.txt', header = F)
setwd("C:/Bioinformática/RNA Sequencing/Notes/RNA-Seq data from NCBI GEO")
# input list of Ensembl ID's
ensembl.ids <- read.delim('gene_ensembl_ids.txt', header = F)
# method 1: biomaRt
listEnsembl()
ensembl <- useEnsembl(biomart = "genes")
ensembl
View(ensembl.ids)
View(ensembl)
datasets <- listDatasets(ensembl)
View(datasets)
head(datasets)
#conecta el database con el dataset
ensembl.conection <- useMart("ensembl", dataset = 'hsapiens_gene_ensembl')
getBM(attributes = c('ensembl_gene_id','external_gene_name'),
filters = "ensembl_gene_id",
values = ensembl.ids$V1,
mart = ensembl.conection)
#built the query
#función para obtener los atributos, me fijo y en el filtro pongo "gene name" y "gene stable id"
attr <- listAttributes(ensembl.conection)
View(attr)
attr
head(attr)
filters <- listFilters(ensembl.conection)
View(filters)
head(filters)
ensembl.ids
View(ensembl.ids)
getBM(attributes = c('ensembl_gene_id','external_gene_name'),
filters = "ensembl_gene_id",
values = ensembl.ids$V1,
mart = ensembl.conection)
View(filters)
View(attr)
grch38
ensembl.ids
# method 2: annotables
grch38 %>%
filter(ensgene %in% ensembl.ids$V1)
keytypes(EnsDb.Hsapiens.v86)
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
mapIds(EnsDb.Hsapiens.v86,
keys = ensembl.ids$V1,
keytype = 'GENEID',
column = 'SYMBOL')
